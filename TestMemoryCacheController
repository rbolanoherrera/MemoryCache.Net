using System;
using System.Runtime.Caching;
using System.Web.Http;

namespace WebUI.Controllers
{
    public class TestMemoryCacheController : ApiController
    {

        [HttpGet]
        public string SetMemoryCache(string key, string value)
        {
            //If the data exists in cache, pull it from there, otherwise make a call to database to get the data
            ObjectCache cache = MemoryCache.Default;

            CacheItemPolicy policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.Now.AddMinutes(2) };
            cache.Add(key, value, policy);
            return "ok";
        }

        [HttpGet]
        public string GetMemoryCache(string key)
        {
            //If the data exists in cache, pull it from there, otherwise make a call to database to get the data
            ObjectCache cache = MemoryCache.Default;

            return cache.Get(key) as string;
        }

        [HttpGet]
        public string UpdateMemoryCache(string key)
        {
            //If the data exists in cache, pull it from there, otherwise make a call to database to get the data
            ObjectCache cache = MemoryCache.Default;

            string value = this.GetMemoryCache(key) as string;

            if (!string.IsNullOrEmpty(value))
            {
                CacheItemPolicy policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.Now.AddMinutes(2) };
                cache.Set(key, value, policy);
            }

            return value;
        }

    }
}
